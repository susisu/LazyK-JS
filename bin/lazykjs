#!/usr/bin/env node

/*
 * LazyK-JS /bin/lazykjs
 * copyright (c) 2015 Susisu
 */

"use strict";

var fs = require("fs");

var program = require("commander");

var lazy = require("../index.js");
var packageInfo = require("../package.json");

process.title = "lazykjs";

program.version(packageInfo.version, "-v, --version");

program
    .arguments("<file>")
    .action(function (filename) {
        fs.readFile(
            filename, { "encoding": "utf8" },
            function (err, src) {
                if (err) {
                    putLine(err.toString());
                    process.exit(1);
                    return;
                }
                var buffer = "";
                var end = false;
                var resolvers = [];
                process.stdin.on("readable", () => {
                    var chunk = process.stdin.read();
                    if (chunk !== null) {
                        buffer += chunk;
                        for (var i = 0; i < resolvers.length; i++) {
                            resolvers[i][0](buffer.charCodeAt(resolvers[i][1]));
                        }
                        resolvers = [];
                    }
                });
                process.stdin.on("end", () => {
                    end = true;
                    for (var i = 0; i < resolvers.length; i++) {
                        resolvers[i][0](0x100);
                    }
                    resolvers = [];
                });
                function input(index) {
                    if (index < buffer.length) {
                        return Promise.resolve(buffer.charCodeAt(index));
                    }
                    else if (end) {
                        return Promise.resolve(0x100);
                    }
                    else {
                        return new Promise(resolve => {
                            resolvers.push([resolve, index]);
                        });
                    }
                }
                lazy.interpreter.run(
                    filename,
                    src,
                    new lazy.stream.InputStream(input, 0),
                    x => process.stdout.write(x),
                    c => process.exit(c)
                );
            }
        );
    });

program.parse(process.argv);

if (program.args.length === 0) {
    program.help();
}
