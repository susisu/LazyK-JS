#!/usr/bin/env node

/*
 * LazyK-JS /bin/lazykjs
 * copyright (c) 2015 Susisu
 */

"use strict";

var fs = require("fs");

var program = require("commander");

var lazy = require("../index.js");
var packageInfo = require("../package.json");

process.title = "lazykjs";

program.version(packageInfo.version, "-v, --version");

program.usage("[options] [-] [file]")
program.option("-e, --eval <program>", "one line of program");

program.parse(process.argv);

var mode = "help";

if (mode === "help" && program.eval !== undefined) {
    mode = "eval";
    run("", program.eval, stdInputStream());
}

if (mode === "help" && program.args.length > 0) {
    mode = "file";
    if (program.args[0] === "-") {
        (function () {
            var buffer = "";
            
            process.stdin.on("readable", () => {
                var chunk = process.stdin.read();
                if (chunk !== null) {
                    buffer += chunk;
                }
            });

            process.stdin.on("end", () => {
                run("stdin", buffer, new lazy.stream.StringStream(""));
            });
        })();
    }
    else {
        fs.readFile(
            program.args[0], { "encoding": "utf8" },
            function (err, src) {
                if (err) {
                    console.error(err.toString());
                    process.exit(1);
                    return;
                }
                run(program.args[0], src, stdInputStream());
            }
        );
    }
}

if (mode === "help") {
    program.help();
}

function run(name, src, stream) {
    try {
        lazy.interpreter.run(
            name,
            src,
            stream,
            x => process.stdout.write(x),
            c => process.exit(c)
        ).catch(error => {
            console.error(String(error));
            process.exit(1);
            return;
        });
    }
    catch (error) {
        console.error(String(error));
        process.exit(1);
        return;
    }
}

function stdInputStream() {
    var buffer = "";
    var end = false;
    var resolvers = [];
    
    process.stdin.on("readable", () => {
        var chunk = process.stdin.read();
        if (chunk !== null) {
            buffer += chunk;
            for (var i = 0; i < resolvers.length; i++) {
                resolvers[i][0](buffer.charCodeAt(resolvers[i][1]));
            }
            resolvers = [];
        }
    });

    process.stdin.on("end", () => {
        end = true;
        for (var i = 0; i < resolvers.length; i++) {
            resolvers[i][0](0x100);
        }
        resolvers = [];
    });

    function input(index) {
        if (index < buffer.length) {
            return Promise.resolve(buffer.charCodeAt(index));
        }
        else if (end) {
            return Promise.resolve(0x100);
        }
        else {
            return new Promise(resolve => {
                resolvers.push([resolve, index]);
            });
        }
    }

    return new lazy.stream.InputStream(input, 0);
}